Inyeccion de dependencias
	por constructor
	por setter
	por atributo
Los estereotipos nos dan un rol 
	@component
		bean que no entra en las categorias
	@controller
		exposicion de datos
	@service
		beans con logica de negocio
	@repository
		acceso a datos
Qualifiers
	se pone el nombre en @component('nombre')
	en autowired se coloca @qualifier('nombre')
	solo se usa cuando se tienen 2 o mas objetos en el contexto
Perfiles
	hay que definir los beans
	dev, qa, prod
	en el application properties hay que colocar
		->spring.profiles.active=prod
	o en las variables de la VM
		->-Dspring.profiles.active=dev
	las variables de VM tienen mas preferencia
	hay que añadir default al perfil por defecto
		@Profile(value= {"dev","default"})	
Scopes(tiempo de vida de bena)
	singleton 1 solo (por defecto)
	prototipe 1 cada que se solicita
	request 1 por cada peticion
	session 1 por session http
Beans de forma explicita
	Cuando no se pueda colocar la anotacion
	añadir @Bean a un metodo que devuelva el objeto del tipo que se necesita
Autowire con listas
	se puede indicar que se inyecten todos los objetos de un tipo en una lista
	o que implementen una interfaz
Uso de @SpringBootApplication
	equivalente
	@Configuration
	@ComponentScan
	@EnableAutoConfiguration
Carga de propiedades
	crear archivo .properties
	crear Clase FigurePropertiConfiguration
	Crear un metodo con anotacion bean que devuelva PropertySourcesPlaceholderConfigurer
	y con anotaciones @Value("${circle.radius:0}") con valor por defecto
SpEL
	Spring expression languaje
	operaciones aritmentioca, rleacionesl, logicos condicionales y expresiones regulares
	ExpressionParser parse = new SpelExpressionParser();
		Expression result = parse.parseExpression("10 + 20");
		log.info("Result {} ", result.getValue());
Aware interfaces
	permiten recibir eventos de spring
	disponibles
		-BeanNameAware
		-BeanFactoryAware
		-ApplicationContextAware
		-MessageSourceAware
		-ApplicationeventPublisherAware
		-ResourceLoaderAware
		-EnvironmentAware
Callbacks
	deben ser void y no recibir argumentos
	son jsr osea que no son de spring sino de java
	postconstruct
	predestroy
	sino se puede acceder al codigo y anotarlo se puede usar
		@Bean(initMethod="init", destroyMethod="destroy")
Intefaces InitializingBean y DisposableBean 
	funcionan igual que postconstruct y predestroy
Inicializacion
	eager - se inicializan sin importar si se usan o no
		ejemplo singleton
	lazy - se inicilizan hasta que se usan
		prototype
BeanPostProcesor
	antes y despues de inicializar el bean
	evento por cada bean que se construye
Orden de ejecucion
	1. setBeanName awareInterfaces
	2. postProcessBefore...
	3. @PostConstruct
	4. AfterPropertiesSet
	5. Post ProcessAfterInitialization
	bean vivo
	1. @Predestroy
	2. Destroy de disponsablebean
	
AOP ======
programacion orientada a aspector
Resuelven crosscuting converns
-Aspect
-join point; punto de ejecucion del programa
-advice; accion a tomar en un joinpoint
-pointcut; predicado que representa un conjunto de joinpoints
-target object; objeto intevenido por uno o mas aspectos
-aop proxy; un objeto permite soportar aspectos
-weaving; enlace entre aspectos y objetos

Advice:
	acctiona tomar en un joinpoint especifico
	-before; antes del joinpoint interrumpe solo si se lanza una exception
	-after returning: se ejecuta despues del joinpint a menos que se lance una exception
	-after throwing; se ejcuta cuando se lanza una exception
	-after finally; se ejecuta si hay o no exception
	-around; rodea la ejecucion de un metodo decide si ejecuta o no y puede hacer algo despues
Crear aspecto
	crear aspect
	colocar en el advice que se va a ejecutar
	@Before("execution(* com.gabo32.dev4j.di.aop.TargetObject.*(..))")
	indicar cual es el target
Definiendo precendencia @Order
	se indica con un numero el orden de ejecucion
Reutilizando pointcuts
	se puede crear una clase ahi se coloca el pointcut 
	y desde los aspectos llamar a esta clase 
	con el fin de no tener en muchos lados el mismo pointcut
TypeSignature Patterns
	otro tipo de expresion pointcut es seleccionar todos los pointcuts
	






















	
		
	
	
	